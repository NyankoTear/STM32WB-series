ARM GAS  /tmp/ccdAeFDz.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32wbxx_hal_flash.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.FLASH_Program_DoubleWord,"ax",%progbits
  18              		.align	1
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	FLASH_Program_DoubleWord:
  26              	.LVL0:
  27              	.LFB953:
  28              		.file 1 "Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c"
   1:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /**
   2:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   ******************************************************************************
   3:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @file    stm32wbxx_hal_flash.c
   4:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @author  MCD Application Team
   5:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @brief   FLASH HAL module driver.
   6:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   *          This file provides firmware functions to manage the following
   7:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   *          functionalities of the internal FLASH memory:
   8:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   *           + Program operations functions
   9:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   *           + Memory Control functions
  10:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   *           + Peripheral Errors functions
  11:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   *
  12:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****  @verbatim
  13:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   ==============================================================================
  14:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****                         ##### FLASH peripheral features #####
  15:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   ==============================================================================
  16:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
  17:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   [..] The Flash memory interface manages CPU AHB I-Code and D-Code accesses
  18:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****        to the Flash memory. It implements the erase and program Flash memory operations
  19:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****        and the read and write protection mechanisms.
  20:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
  21:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   [..] The Flash memory interface accelerates code execution with a system of instruction
  22:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****        prefetch and cache lines.
  23:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
  24:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   [..] The FLASH main features are:
  25:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       (+) Flash memory read operations
  26:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       (+) Flash memory program/erase operations
  27:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       (+) Program and Erase suspension
  28:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       (+) Read / write protections (2 areas per features)
  29:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       (+) CPU2 Security area
  30:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       (+) Option bytes programming
ARM GAS  /tmp/ccdAeFDz.s 			page 2


  31:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       (+) Prefetch on CPU1 I-Code and CPU2 S-bus
  32:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       (+) 32 instruction cache lines of 4*64 bits on I-Code for CPU1
  33:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       (+) 8 data cache lines of 4*64 bits on D-Code for CPU1
  34:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       (+) 4 instruction cache lines of 1*64 bits on S-bus for CPU2
  35:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       (+) 4 data cache lines of 1*64 bits on S-Bus for CPU2
  36:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       (+) Error code correction (ECC) : Data in flash are 72-bits word
  37:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****           (8 bits added per double word)
  38:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
  39:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****                         ##### How to use this driver #####
  40:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****  ==============================================================================
  41:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     [..]
  42:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       This driver provides functions and macros to configure and program the FLASH
  43:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       memory of all STM32WBxx devices.
  44:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
  45:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       (#) Flash Memory IO Programming functions:
  46:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****            (++) Lock and Unlock the FLASH interface using HAL_FLASH_Unlock() and
  47:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****                 HAL_FLASH_Lock() functions
  48:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****            (++) Program functions: double word and fast program (full row programming)
  49:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****            (++) There are two modes of programming:
  50:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****             (+++) Polling mode using HAL_FLASH_Program() function
  51:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****             (+++) Interrupt mode using HAL_FLASH_Program_IT() function
  52:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
  53:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       (#) Interrupts and flags management functions:
  54:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****            (++) Handle FLASH interrupts by calling HAL_FLASH_IRQHandler()
  55:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****            (++) Callback functions are called when the flash operations are finished :
  56:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****                 HAL_FLASH_EndOfOperationCallback() when everything is ok, otherwise
  57:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****                 HAL_FLASH_OperationErrorCallback()
  58:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****            (++) Get error flag status by calling HAL_GetError()
  59:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
  60:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       (#) Option bytes management functions :
  61:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****            (++) Lock and Unlock the option bytes using HAL_FLASH_OB_Unlock() and
  62:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****                 HAL_FLASH_OB_Lock() functions
  63:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****            (++) Launch the reload of the option bytes using HAL_FLASH_OB_Launch() function.
  64:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****                 In this case, a reset is generated
  65:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
  66:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     [..]
  67:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       In addition to these functions, this driver includes a set of macros allowing
  68:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       to handle the following operations:
  69:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****        (+) Set the latency
  70:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****        (+) Enable/Disable the prefetch buffer
  71:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****        (+) Enable/Disable the suspend program or erase request
  72:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****        (+) Enable/Disable the Instruction cache and the Data cache
  73:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****        (+) Reset the Instruction cache and the Data cache
  74:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****        (+) Enable/Disable the Flash interrupts
  75:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****        (+) Monitor the Flash flags status
  76:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
  77:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****  @endverbatim
  78:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   ******************************************************************************
  79:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @attention
  80:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   *
  81:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  82:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * All rights reserved.</center></h2>
  83:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   *
  84:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  85:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * the "License"; You may not use this file except in compliance with the
  86:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * License. You may obtain a copy of the License at:
  87:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   *                        opensource.org/licenses/BSD-3-Clause
ARM GAS  /tmp/ccdAeFDz.s 			page 3


  88:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   *
  89:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   ******************************************************************************
  90:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   */
  91:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
  92:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /* Includes ------------------------------------------------------------------*/
  93:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** #include "stm32wbxx_hal.h"
  94:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
  95:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /** @addtogroup STM32WBxx_HAL_Driver
  96:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @{
  97:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   */
  98:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
  99:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /** @defgroup FLASH FLASH
 100:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @brief FLASH HAL module driver
 101:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @{
 102:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   */
 103:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 104:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** #ifdef HAL_FLASH_MODULE_ENABLED
 105:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 106:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /* Private typedef -----------------------------------------------------------*/
 107:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /* Private defines -----------------------------------------------------------*/
 108:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /** @addtogroup FLASH_Private_Constants
 109:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @{
 110:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   */
 111:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** #define FLASH_NB_DOUBLE_WORDS_IN_ROW  64
 112:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /**
 113:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @}
 114:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   */
 115:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 116:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /* Private macros ------------------------------------------------------------*/
 117:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /* Private variables ---------------------------------------------------------*/
 118:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /** @defgroup FLASH_Private_Variables FLASH Private Variables
 119:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****  * @{
 120:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****  */
 121:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /**
 122:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @brief  Variable used for Program/Erase sectors under interruption
 123:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   */
 124:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** FLASH_ProcessTypeDef pFlash = {.Lock = HAL_UNLOCKED, \
 125:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****                                .ErrorCode = HAL_FLASH_ERROR_NONE, \
 126:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****                                .ProcedureOnGoing = 0U, \
 127:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****                                .Address = 0U, \
 128:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****                                .Page = 0U, \
 129:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****                                .NbPagesToErase = 0U
 130:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****                               };
 131:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /**
 132:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @}
 133:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   */
 134:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 135:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /* Private function prototypes -----------------------------------------------*/
 136:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /** @defgroup FLASH_Private_Functions FLASH Private Functions
 137:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****  * @{
 138:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****  */
 139:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** static void          FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data);
 140:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** static void          FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress);
 141:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /**
 142:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @}
 143:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   */
 144:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
ARM GAS  /tmp/ccdAeFDz.s 			page 4


 145:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /* Exported functions --------------------------------------------------------*/
 146:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /** @defgroup FLASH_Exported_Functions FLASH Exported Functions
 147:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @{
 148:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   */
 149:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 150:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /** @defgroup FLASH_Exported_Functions_Group1 Programming operation functions
 151:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****  *  @brief   Programming operation functions
 152:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****  *
 153:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** @verbatim
 154:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****  ===============================================================================
 155:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****                   ##### Programming operation functions #####
 156:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****  ===============================================================================
 157:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     [..]
 158:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     This subsection provides a set of functions allowing to manage the FLASH
 159:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     program operations.
 160:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 161:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** @endverbatim
 162:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @{
 163:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   */
 164:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 165:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /**
 166:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @brief  Program double word or fast program of a row at a specified address.
 167:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @note   Before any operation, it is possible to check there is no operation suspended
 168:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   *         by call HAL_FLASHEx_IsOperationSuspended()
 169:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @param  TypeProgram Indicate the way to program at a specified address
 170:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   *                       This parameter can be a value of @ref FLASH_TYPE_PROGRAM
 171:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @param  Address Specifies the address to be programmed.
 172:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @param  Data Specifies the data to be programmed
 173:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   *                This parameter is the data for the double word program and the address where
 174:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   *                are stored the data for the row fast program.
 175:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   *
 176:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @retval HAL_StatusTypeDef HAL Status
 177:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   */
 178:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
 179:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** {
 180:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   HAL_StatusTypeDef status;
 181:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 182:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* Check the parameters */
 183:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 184:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   assert_param(IS_ADDR_ALIGNED_64BITS(Address));
 185:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
 186:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 187:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* Process Locked */
 188:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   __HAL_LOCK(&pFlash);
 189:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 190:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* Reset error code */
 191:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 192:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 193:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* Verify that next operation can be proceed */
 194:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 195:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 196:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   if (status == HAL_OK)
 197:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 198:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 199:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     {
 200:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       /* Check the parameters */
 201:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
ARM GAS  /tmp/ccdAeFDz.s 			page 5


 202:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 203:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       /* Program double-word (64-bit) at a specified address */
 204:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       FLASH_Program_DoubleWord(Address, Data);
 205:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     }
 206:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     else
 207:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     {
 208:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       /* Check the parameters */
 209:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));
 210:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 211:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       /* Fast program a 64 row double-word (64-bit) at a specified address */
 212:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       FLASH_Program_Fast(Address, (uint32_t)Data);
 213:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     }
 214:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 215:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     /* Wait for last operation to be completed */
 216:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 217:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 218:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     /* If the program operation is completed, disable the PG or FSTPG Bit */
 219:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     CLEAR_BIT(FLASH->CR, TypeProgram);
 220:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 221:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 222:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* Process Unlocked */
 223:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   __HAL_UNLOCK(&pFlash);
 224:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 225:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* return status */
 226:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   return status;
 227:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** }
 228:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 229:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /**
 230:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @brief  Program double word or fast program of a row at a specified address with interrupt enab
 231:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @note   Before any operation, it is possible to check there is no operation suspended
 232:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   *         by call HAL_FLASHEx_IsOperationSuspended()
 233:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @param  TypeProgram Indicate the way to program at a specified address.
 234:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   *                           This parameter can be a value of @ref FLASH_TYPE_PROGRAM
 235:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @param  Address Specifies the address to be programmed.
 236:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @param  Data Specifies the data to be programmed
 237:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   *                This parameter is the data for the double word program and the address where
 238:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   *                are stored the data for the row fast program.
 239:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   *
 240:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @retval HAL Status
 241:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   */
 242:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** HAL_StatusTypeDef HAL_FLASH_Program_IT(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
 243:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** {
 244:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   HAL_StatusTypeDef status;
 245:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 246:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* Check the parameters */
 247:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 248:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   assert_param(IS_ADDR_ALIGNED_64BITS(Address));
 249:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
 250:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 251:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* Process Locked */
 252:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   __HAL_LOCK(&pFlash);
 253:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 254:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* Reset error code */
 255:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 256:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 257:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* Verify that next operation can be proceed */
 258:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
ARM GAS  /tmp/ccdAeFDz.s 			page 6


 259:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 260:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   if (status != HAL_OK)
 261:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 262:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     /* Process Unlocked */
 263:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     __HAL_UNLOCK(&pFlash);
 264:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 265:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   else
 266:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 267:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     /* Set internal variables used by the IRQ handler */
 268:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     pFlash.ProcedureOnGoing = TypeProgram;
 269:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     pFlash.Address = Address;
 270:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 271:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     /* Enable End of Operation and Error interrupts */
 272:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 273:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 274:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 275:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     {
 276:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       /* Check the parameters */
 277:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
 278:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 279:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       /* Program double-word (64-bit) at a specified address */
 280:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       FLASH_Program_DoubleWord(Address, Data);
 281:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     }
 282:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     else
 283:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     {
 284:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       /* Check the parameters */
 285:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));
 286:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 287:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       /* Fast program a 64 row double-word (64-bit) at a specified address */
 288:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       FLASH_Program_Fast(Address, (uint32_t)Data);
 289:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     }
 290:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 291:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 292:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* return status */
 293:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   return status;
 294:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** }
 295:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 296:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /**
 297:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @brief Handle FLASH interrupt request.
 298:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @retval None
 299:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   */
 300:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** void HAL_FLASH_IRQHandler(void)
 301:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** {
 302:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   uint32_t param = 0xFFFFFFFFU;
 303:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   uint32_t error;
 304:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 305:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* Check FLASH operation error flags */
 306:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 307:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 308:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* Clear Current operation */
 309:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   CLEAR_BIT(FLASH->CR, pFlash.ProcedureOnGoing);
 310:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 311:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* A] Set parameter for user or error callbacks */
 312:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* check operation was a program or erase */
 313:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   if ((pFlash.ProcedureOnGoing & (FLASH_TYPEPROGRAM_DOUBLEWORD | FLASH_TYPEPROGRAM_FAST)) != 0U)
 314:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 315:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     /* return adress being programmed */
ARM GAS  /tmp/ccdAeFDz.s 			page 7


 316:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     param = pFlash.Address;
 317:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 318:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   else if ((pFlash.ProcedureOnGoing & (FLASH_TYPEERASE_MASSERASE | FLASH_TYPEERASE_PAGES)) != 0U)
 319:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 320:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     /* return page number being erased (0 for mass erase) */
 321:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     param = pFlash.Page;
 322:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 323:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   else
 324:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 325:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     /* No Procedure on-going */
 326:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     /* Nothing to do, but check error if any */
 327:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 328:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 329:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* B] Check errors */
 330:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   if (error != 0U)
 331:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 332:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     /*Save the error code*/
 333:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     pFlash.ErrorCode |= error;
 334:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 335:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     /* clear error flags */
 336:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     __HAL_FLASH_CLEAR_FLAG(error);
 337:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 338:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     /*Stop the procedure ongoing*/
 339:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 340:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 341:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     /* Error callback */
 342:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     HAL_FLASH_OperationErrorCallback(param);
 343:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 344:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 345:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* C] Check FLASH End of Operation flag */
 346:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 347:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 348:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     /* Clear FLASH End of Operation pending bit */
 349:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 350:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 351:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     if (pFlash.ProcedureOnGoing == FLASH_TYPEERASE_PAGES)
 352:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     {
 353:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       /* Nb of pages to erased can be decreased */
 354:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       pFlash.NbPagesToErase--;
 355:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 356:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       /* Check if there are still pages to erase*/
 357:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       if (pFlash.NbPagesToErase != 0U)
 358:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       {
 359:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****         /* Increment page number */
 360:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****         pFlash.Page++;
 361:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****         FLASH_PageErase(pFlash.Page);
 362:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       }
 363:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       else
 364:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       {
 365:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****         /* No more pages to erase: stop erase pages procedure */
 366:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****         pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 367:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       }
 368:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     }
 369:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     else
 370:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     {
 371:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       /*Stop the ongoing procedure */
 372:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       pFlash.ProcedureOnGoing = FLASH_TYPENONE;
ARM GAS  /tmp/ccdAeFDz.s 			page 8


 373:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     }
 374:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 375:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     /* User callback */
 376:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     HAL_FLASH_EndOfOperationCallback(param);
 377:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 378:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 379:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   if (pFlash.ProcedureOnGoing == FLASH_TYPENONE)
 380:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 381:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     /* Disable End of Operation and Error interrupts */
 382:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 383:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 384:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     /* Process Unlocked */
 385:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     __HAL_UNLOCK(&pFlash);
 386:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 387:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** }
 388:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 389:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /**
 390:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @brief  FLASH end of operation interrupt callback.
 391:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @param  ReturnValue The value saved in this parameter depends on the ongoing procedure
 392:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   *                  Mass Erase: 0
 393:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   *                  Page Erase: Page which has been erased
 394:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   *                  Program: Address which was selected for data program
 395:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @retval None
 396:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   */
 397:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** __weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
 398:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** {
 399:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* Prevent unused argument(s) compilation warning */
 400:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   UNUSED(ReturnValue);
 401:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 402:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 403:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****             the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
 404:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****    */
 405:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** }
 406:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 407:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /**
 408:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @brief  FLASH operation error interrupt callback.
 409:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @param  ReturnValue The value saved in this parameter depends on the ongoing procedure
 410:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   *                 Mass Erase: 0
 411:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   *                 Page Erase: Page number which returned an error
 412:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   *                 Program: Address which was selected for data program
 413:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @retval None
 414:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   */
 415:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** __weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
 416:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** {
 417:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* Prevent unused argument(s) compilation warning */
 418:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   UNUSED(ReturnValue);
 419:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 420:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 421:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****             the HAL_FLASH_OperationErrorCallback could be implemented in the user file
 422:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****    */
 423:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** }
 424:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 425:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /**
 426:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @}
 427:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   */
 428:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 429:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /** @defgroup FLASH_Exported_Functions_Group2 Peripheral Control functions
ARM GAS  /tmp/ccdAeFDz.s 			page 9


 430:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****  *  @brief   Management functions
 431:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****  *
 432:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** @verbatim
 433:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****  ===============================================================================
 434:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****                       ##### Peripheral Control functions #####
 435:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****  ===============================================================================
 436:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     [..]
 437:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     This subsection provides a set of functions allowing to control the FLASH
 438:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     memory operations.
 439:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 440:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** @endverbatim
 441:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @{
 442:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   */
 443:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 444:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /**
 445:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @brief  Unlock the FLASH control register access.
 446:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @retval HAL Status
 447:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   */
 448:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** HAL_StatusTypeDef HAL_FLASH_Unlock(void)
 449:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** {
 450:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   HAL_StatusTypeDef status = HAL_OK;
 451:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 452:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 453:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 454:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     /* Authorize the FLASH Registers access */
 455:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 456:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 457:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 458:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     /* verify Flash is unlock */
 459:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 460:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     {
 461:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       status = HAL_ERROR;
 462:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     }
 463:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 464:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 465:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   return status;
 466:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** }
 467:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 468:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /**
 469:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @brief  Lock the FLASH control register access.
 470:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @retval HAL Status
 471:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   */
 472:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** HAL_StatusTypeDef HAL_FLASH_Lock(void)
 473:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** {
 474:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   HAL_StatusTypeDef status = HAL_OK;
 475:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 476:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* Set the LOCK Bit to lock the FLASH Registers access */
 477:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
 478:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 479:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 480:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* verify Flash is locked */
 481:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 482:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 483:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     status = HAL_ERROR;
 484:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 485:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 486:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   return status;
ARM GAS  /tmp/ccdAeFDz.s 			page 10


 487:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** }
 488:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 489:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /**
 490:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @brief  Unlock the FLASH Option Bytes Registers access.
 491:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @retval HAL Status
 492:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   */
 493:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
 494:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** {
 495:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 496:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 497:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* @Note The lock and unlock procedure is done only using CR registers even from CPU2 */
 498:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0U)
 499:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 500:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     /* Authorizes the Option Byte register programming */
 501:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 502:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 503:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 504:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     /* verify option bytes are unlocked */
 505:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) == 0U)
 506:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     {
 507:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       status = HAL_OK;
 508:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     }
 509:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 510:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 511:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   return status;
 512:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** }
 513:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 514:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /**
 515:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @brief  Lock the FLASH Option Bytes Registers access.
 516:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @retval HAL Status
 517:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   */
 518:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
 519:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** {
 520:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   HAL_StatusTypeDef status = HAL_OK;
 521:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 522:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
 523:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* @Note The lock and unlock procedure is done only using CR registers even from CPU2 */
 524:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   SET_BIT(FLASH->CR, FLASH_CR_OPTLOCK);
 525:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 526:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* verify option bytes are lock */
 527:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) == 0U)
 528:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 529:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     status = HAL_ERROR;
 530:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 531:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 532:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   return status;
 533:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** }
 534:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 535:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /**
 536:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @brief  Launch the option byte loading.
 537:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @retval HAL Status
 538:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   */
 539:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
 540:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** {
 541:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* Set the bit to force the option byte reloading */
 542:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* The OB launch is done from the same register either from CPU1 or CPU2 */
 543:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   SET_BIT(FLASH->CR, FLASH_CR_OBL_LAUNCH);
ARM GAS  /tmp/ccdAeFDz.s 			page 11


 544:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 545:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* We should not reach here : Option byte launch generates Option byte reset
 546:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****      so return error */
 547:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   return HAL_ERROR;
 548:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** }
 549:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 550:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /**
 551:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @}
 552:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   */
 553:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 554:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /** @defgroup FLASH_Exported_Functions_Group3 Peripheral State and Errors functions
 555:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****  *  @brief   Peripheral Errors functions
 556:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****  *
 557:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** @verbatim
 558:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****  ===============================================================================
 559:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****                 ##### Peripheral Errors functions #####
 560:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****  ===============================================================================
 561:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     [..]
 562:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     This subsection permits to get in run-time Errors of the FLASH peripheral.
 563:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 564:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** @endverbatim
 565:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @{
 566:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   */
 567:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 568:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /**
 569:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @brief  Get the specific FLASH error flag.
 570:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @retval FLASH_ErrorCode The returned value can be
 571:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   *            @arg @ref HAL_FLASH_ERROR_NONE No error set
 572:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   *            @arg @ref HAL_FLASH_ERROR_OP FLASH Operation error
 573:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   *            @arg @ref HAL_FLASH_ERROR_PROG FLASH Programming error
 574:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   *            @arg @ref HAL_FLASH_ERROR_WRP FLASH Write protection error
 575:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   *            @arg @ref HAL_FLASH_ERROR_PGA FLASH Programming alignment error
 576:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   *            @arg @ref HAL_FLASH_ERROR_SIZ FLASH Size error
 577:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   *            @arg @ref HAL_FLASH_ERROR_PGS FLASH Programming sequence error
 578:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   *            @arg @ref HAL_FLASH_ERROR_MIS FLASH Fast programming data miss error
 579:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   *            @arg @ref HAL_FLASH_ERROR_FAST FLASH Fast programming error
 580:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   *            @arg @ref HAL_FLASH_ERROR_RD FLASH Read Protection error (PCROP)
 581:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   *            @arg @ref HAL_FLASH_ERROR_OPTV FLASH Option validity error
 582:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   */
 583:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** uint32_t HAL_FLASH_GetError(void)
 584:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** {
 585:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   return pFlash.ErrorCode;
 586:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** }
 587:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 588:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /**
 589:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @}
 590:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   */
 591:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 592:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /**
 593:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @}
 594:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   */
 595:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 596:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /* Private functions ---------------------------------------------------------*/
 597:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 598:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /** @addtogroup FLASH_Private_Functions
 599:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @{
 600:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   */
ARM GAS  /tmp/ccdAeFDz.s 			page 12


 601:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 602:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /**
 603:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @brief  Wait for a FLASH operation to complete.
 604:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @param  Timeout Maximum flash operation timeout
 605:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @retval HAL_StatusTypeDef HAL Status
 606:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   */
 607:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
 608:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** {
 609:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   uint32_t error;
 610:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   uint32_t tickstart = HAL_GetTick();
 611:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 612:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
 613:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****      Even if the FLASH operation fails, the BUSY flag will be reset and an error
 614:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****      flag will be set */
 615:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 616:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 617:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     if ((HAL_GetTick() - tickstart) >= Timeout)
 618:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     {
 619:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       return HAL_TIMEOUT;
 620:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     }
 621:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 622:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 623:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* Check FLASH operation error flags */
 624:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   error = FLASH->SR;
 625:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 626:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* Check FLASH End of Operation flag */
 627:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   if ((error & FLASH_FLAG_EOP) != 0U)
 628:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 629:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     /* Clear FLASH End of Operation pending bit */
 630:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 631:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 632:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 633:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* Now update error variable to only error value */
 634:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   error &= FLASH_FLAG_SR_ERRORS;
 635:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 636:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* clear error flags */
 637:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   __HAL_FLASH_CLEAR_FLAG(error);
 638:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 639:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   if (error != 0U)
 640:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 641:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     /*Save the error code*/
 642:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     pFlash.ErrorCode = error;
 643:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 644:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     return HAL_ERROR;
 645:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 646:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 647:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* Wait for control register to be written */
 648:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 649:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 650:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     if ((HAL_GetTick() - tickstart) >= Timeout)
 651:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     {
 652:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       return HAL_TIMEOUT;
 653:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     }
 654:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 655:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 656:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   return HAL_OK;
 657:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** }
ARM GAS  /tmp/ccdAeFDz.s 			page 13


 658:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 659:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /**
 660:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @brief  Program double-word (64-bit) at a specified address.
 661:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @param  Address Specifies the address to be programmed.
 662:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @param  Data Specifies the data to be programmed.
 663:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @retval None
 664:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   */
 665:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
 666:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** {
  29              		.loc 1 666 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34              		.loc 1 666 1 is_stmt 0 view .LVU1
  35 0000 10B4     		push	{r4}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 4
  38              		.cfi_offset 4, -4
 667:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* Set PG bit */
 668:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   SET_BIT(FLASH->CR, FLASH_CR_PG);
  39              		.loc 1 668 3 is_stmt 1 view .LVU2
  40 0002 064C     		ldr	r4, .L3
  41 0004 6169     		ldr	r1, [r4, #20]
  42 0006 41F00101 		orr	r1, r1, #1
  43 000a 6161     		str	r1, [r4, #20]
 669:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 670:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* Program first word */
 671:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   *(uint32_t *)Address = (uint32_t)Data;
  44              		.loc 1 671 3 view .LVU3
  45              		.loc 1 671 24 is_stmt 0 view .LVU4
  46 000c 0260     		str	r2, [r0]
 672:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 673:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* Barrier to ensure programming is performed in 2 steps, in right order
 674:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     (independently of compiler optimization behavior) */
 675:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   __ISB();
  47              		.loc 1 675 3 is_stmt 1 view .LVU5
  48              	.LBB10:
  49              	.LBI10:
  50              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
ARM GAS  /tmp/ccdAeFDz.s 			page 14


  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
ARM GAS  /tmp/ccdAeFDz.s 			page 15


  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
ARM GAS  /tmp/ccdAeFDz.s 			page 16


 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 144:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 152:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 156:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 158:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 159:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 160:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 161:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 162:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 165:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 168:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 179:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 180:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccdAeFDz.s 			page 17


 189:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 191:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 192:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 201:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 202:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 210:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 212:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 216:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 217:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 218:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 221:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 224:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 225:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 229:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 230:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               xPSR Register value
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 233:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 239:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 243:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
ARM GAS  /tmp/ccdAeFDz.s 			page 18


 246:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 247:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 249:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 253:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 257:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 261:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 268:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 271:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 273:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 274:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 275:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 282:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 285:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 286:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 289:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 290:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 295:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccdAeFDz.s 			page 19


 303:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 310:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 314:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 318:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 322:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 323:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 325:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 327:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 328:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 330:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 331:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 334:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 339:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               SP Register value
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 359:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccdAeFDz.s 			page 20


 360:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 366:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 367:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 370:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 371:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 375:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 382:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 385:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 388:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 390:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 391:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 394:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 395:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 400:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 406:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 407:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 412:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 413:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 415:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccdAeFDz.s 			page 21


 417:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 418:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 420:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 421:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 422:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 424:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 425:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 426:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 427:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 428:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 429:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 430:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 431:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 432:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 433:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 434:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 435:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 436:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 438:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 439:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 440:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 442:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 446:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 447:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 448:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 450:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 451:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 453:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 456:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 457:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 458:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 460:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 461:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 462:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 464:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 465:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 471:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
ARM GAS  /tmp/ccdAeFDz.s 			page 22


 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 486:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 491:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 492:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 493:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 498:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 499:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 500:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 501:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 502:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 503:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 504:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 506:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 507:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 508:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 509:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 511:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 513:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 518:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 520:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 521:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 522:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccdAeFDz.s 			page 23


 531:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 537:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 540:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 541:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 542:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 544:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 548:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 552:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 554:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 557:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 558:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 560:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 564:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 568:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 572:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 573:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 574:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 575:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 577:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 580:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 582:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 583:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 584:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 585:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 586:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
ARM GAS  /tmp/ccdAeFDz.s 			page 24


 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 592:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 596:Drivers/CMSIS/Include/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 598:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 599:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 600:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 601:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 603:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 604:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 605:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 606:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 608:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 609:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 610:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 611:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 612:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 615:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 616:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 621:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 622:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 625:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 626:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 627:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 628:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 630:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 631:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 633:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 634:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 636:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 637:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 638:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 639:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 641:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 644:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
ARM GAS  /tmp/ccdAeFDz.s 			page 25


 645:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 647:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 648:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 649:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 650:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 652:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 654:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 655:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 661:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 663:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 665:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 666:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 669:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 671:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 672:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 673:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 675:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 682:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 683:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 684:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 689:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 690:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 693:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 695:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 696:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 698:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 699:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 700:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccdAeFDz.s 			page 26


 702:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 703:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 704:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 708:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 711:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 712:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 713:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 714:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 715:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 716:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 721:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 723:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 724:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 726:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 727:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 731:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 732:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 734:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 735:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 736:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 737:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 738:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 742:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 746:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 749:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 751:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 752:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 755:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 757:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
ARM GAS  /tmp/ccdAeFDz.s 			page 27


 759:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 760:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 761:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 762:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 763:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 765:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 766:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 767:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 769:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 772:Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 775:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 778:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 781:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(0U);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 787:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 795:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 796:Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 797:Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 799:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 800:Drivers/CMSIS/Include/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 803:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 804:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)fpscr;
 806:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 809:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 814:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
ARM GAS  /tmp/ccdAeFDz.s 			page 28


 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 817:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 818:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 820:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 826:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 827:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 828:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 829:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 830:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 834:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 835:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 838:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 842:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 845:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 846:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 849:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 853:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 857:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 860:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 861:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 864:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 865:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
  51              		.loc 2 866 27 view .LVU6
  52              	.LBB11:
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
  53              		.loc 2 868 3 view .LVU7
  54              		.syntax unified
ARM GAS  /tmp/ccdAeFDz.s 			page 29


  55              	@ 868 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
  56 000e BFF36F8F 		isb 0xF
  57              	@ 0 "" 2
  58              		.thumb
  59              		.syntax unified
  60              	.LBE11:
  61              	.LBE10:
 676:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 677:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* Program second word */
 678:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
  62              		.loc 1 678 3 view .LVU8
  63              		.loc 1 678 31 is_stmt 0 view .LVU9
  64 0012 4360     		str	r3, [r0, #4]
 679:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** }
  65              		.loc 1 679 1 view .LVU10
  66 0014 5DF8044B 		ldr	r4, [sp], #4
  67              	.LCFI1:
  68              		.cfi_restore 4
  69              		.cfi_def_cfa_offset 0
  70 0018 7047     		bx	lr
  71              	.L4:
  72 001a 00BF     		.align	2
  73              	.L3:
  74 001c 00400058 		.word	1476411392
  75              		.cfi_endproc
  76              	.LFE953:
  78              		.section	.RamFunc,"ax",%progbits
  79              		.align	1
  80              		.syntax unified
  81              		.thumb
  82              		.thumb_func
  83              		.fpu fpv4-sp-d16
  85              	FLASH_Program_Fast:
  86              	.LVL1:
  87              	.LFB954:
 680:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 681:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /**
 682:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @brief  Fast program a 32 row double-word (64-bit) at a specified address.
 683:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @param  Address Specifies the address to be programmed.
 684:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @param  DataAddress Specifies the address where the data are stored.
 685:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @retval None
 686:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   */
 687:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
 688:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** {
  88              		.loc 1 688 1 is_stmt 1 view -0
  89              		.cfi_startproc
  90              		@ args = 0, pretend = 0, frame = 0
  91              		@ frame_needed = 0, uses_anonymous_args = 0
  92              		@ link register save eliminated.
  93              		.loc 1 688 1 is_stmt 0 view .LVU12
  94 0000 10B4     		push	{r4}
  95              	.LCFI2:
  96              		.cfi_def_cfa_offset 4
  97              		.cfi_offset 4, -4
 689:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
  98              		.loc 1 689 3 is_stmt 1 view .LVU13
  99              	.LVL2:
ARM GAS  /tmp/ccdAeFDz.s 			page 30


 690:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 100              		.loc 1 690 3 view .LVU14
 691:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 101              		.loc 1 691 3 view .LVU15
 692:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   uint32_t primask_bit;
 102              		.loc 1 692 3 view .LVU16
 693:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 694:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* Set FSTPG bit */
 695:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 103              		.loc 1 695 3 view .LVU17
 104 0002 0D4A     		ldr	r2, .L9
 105 0004 5369     		ldr	r3, [r2, #20]
 106 0006 43F48023 		orr	r3, r3, #262144
 107 000a 5361     		str	r3, [r2, #20]
 696:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 697:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* Enter critical section: row programming should not be longer than 7 ms */
 698:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   primask_bit = __get_PRIMASK();
 108              		.loc 1 698 3 view .LVU18
 109              	.LBB12:
 110              	.LBI12:
 382:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 111              		.loc 2 382 31 view .LVU19
 112              	.LBB13:
 384:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 113              		.loc 2 384 3 view .LVU20
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 114              		.loc 2 386 3 view .LVU21
 115              		.syntax unified
 116              	@ 386 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 117 000c EFF31084 		MRS r4, primask
 118              	@ 0 "" 2
 119              	.LVL3:
 387:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 120              		.loc 2 387 3 view .LVU22
 387:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 121              		.loc 2 387 3 is_stmt 0 view .LVU23
 122              		.thumb
 123              		.syntax unified
 124              	.LBE13:
 125              	.LBE12:
 699:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   __disable_irq();
 126              		.loc 1 699 3 is_stmt 1 view .LVU24
 127              	.LBB14:
 128              	.LBI14:
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 129              		.loc 2 140 27 view .LVU25
 130              	.LBB15:
 142:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 131              		.loc 2 142 3 view .LVU26
 132              		.syntax unified
 133              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 134 0010 72B6     		cpsid i
 135              	@ 0 "" 2
 136              		.thumb
 137              		.syntax unified
 138              	.LBE15:
 139              	.LBE14:
ARM GAS  /tmp/ccdAeFDz.s 			page 31


 689:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 140              		.loc 1 689 11 is_stmt 0 view .LVU27
 141 0012 8023     		movs	r3, #128
 142              	.LVL4:
 143              	.L6:
 700:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 701:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* Program the double word of the row */
 702:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   do
 144              		.loc 1 702 3 is_stmt 1 discriminator 1 view .LVU28
 703:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 704:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     *dest_addr = *src_addr;
 145              		.loc 1 704 5 discriminator 1 view .LVU29
 146              		.loc 1 704 18 is_stmt 0 discriminator 1 view .LVU30
 147 0014 51F8042B 		ldr	r2, [r1], #4
 148              	.LVL5:
 149              		.loc 1 704 16 discriminator 1 view .LVU31
 150 0018 40F8042B 		str	r2, [r0], #4
 151              	.LVL6:
 705:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     dest_addr++;
 152              		.loc 1 705 5 is_stmt 1 discriminator 1 view .LVU32
 706:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     src_addr++;
 153              		.loc 1 706 5 discriminator 1 view .LVU33
 707:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     row_index--;
 154              		.loc 1 707 5 discriminator 1 view .LVU34
 155              		.loc 1 707 14 is_stmt 0 discriminator 1 view .LVU35
 156 001c 013B     		subs	r3, r3, #1
 157              	.LVL7:
 708:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 709:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   while (row_index != 0U);
 158              		.loc 1 709 9 is_stmt 1 discriminator 1 view .LVU36
 159              		.loc 1 709 3 is_stmt 0 discriminator 1 view .LVU37
 160 001e 13F0FF03 		ands	r3, r3, #255
 161              	.LVL8:
 162              		.loc 1 709 3 discriminator 1 view .LVU38
 163 0022 F7D1     		bne	.L6
 164              	.L7:
 710:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 711:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* wait for BSY in order to be sure that flash operation is ended before
 712:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****      allowing prefetch in flash. Timeout does not return status, as it will
 713:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****      be anyway done later */
 714:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 715:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 716:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 165              		.loc 1 716 3 is_stmt 1 discriminator 1 view .LVU39
 714:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 166              		.loc 1 714 9 discriminator 1 view .LVU40
 714:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 167              		.loc 1 714 10 is_stmt 0 discriminator 1 view .LVU41
 168 0024 044B     		ldr	r3, .L9
 169 0026 1B69     		ldr	r3, [r3, #16]
 714:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 170              		.loc 1 714 9 discriminator 1 view .LVU42
 171 0028 13F4803F 		tst	r3, #65536
 172 002c FAD1     		bne	.L7
 717:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 718:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* Exit critical section: restore previous priority mask */
 719:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   __set_PRIMASK(primask_bit);
ARM GAS  /tmp/ccdAeFDz.s 			page 32


 173              		.loc 1 719 3 is_stmt 1 view .LVU43
 174              	.LVL9:
 175              	.LBB16:
 176              	.LBI16:
 412:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 177              		.loc 2 412 27 view .LVU44
 178              	.LBB17:
 414:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 179              		.loc 2 414 3 view .LVU45
 180              		.syntax unified
 181              	@ 414 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 182 002e 84F31088 		MSR primask, r4
 183              	@ 0 "" 2
 184              	.LVL10:
 414:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 185              		.loc 2 414 3 is_stmt 0 view .LVU46
 186              		.thumb
 187              		.syntax unified
 188              	.LBE17:
 189              	.LBE16:
 720:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** }
 190              		.loc 1 720 1 view .LVU47
 191 0032 5DF8044B 		ldr	r4, [sp], #4
 192              	.LCFI3:
 193              		.cfi_restore 4
 194              		.cfi_def_cfa_offset 0
 195              	.LVL11:
 196              		.loc 1 720 1 view .LVU48
 197 0036 7047     		bx	lr
 198              	.L10:
 199              		.align	2
 200              	.L9:
 201 0038 00400058 		.word	1476411392
 202              		.cfi_endproc
 203              	.LFE954:
 205              		.section	.text.HAL_FLASH_EndOfOperationCallback,"ax",%progbits
 206              		.align	1
 207              		.weak	HAL_FLASH_EndOfOperationCallback
 208              		.syntax unified
 209              		.thumb
 210              		.thumb_func
 211              		.fpu fpv4-sp-d16
 213              	HAL_FLASH_EndOfOperationCallback:
 214              	.LVL12:
 215              	.LFB944:
 398:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* Prevent unused argument(s) compilation warning */
 216              		.loc 1 398 1 is_stmt 1 view -0
 217              		.cfi_startproc
 218              		@ args = 0, pretend = 0, frame = 0
 219              		@ frame_needed = 0, uses_anonymous_args = 0
 220              		@ link register save eliminated.
 400:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 221              		.loc 1 400 3 view .LVU50
 405:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 222              		.loc 1 405 1 is_stmt 0 view .LVU51
 223 0000 7047     		bx	lr
 224              		.cfi_endproc
ARM GAS  /tmp/ccdAeFDz.s 			page 33


 225              	.LFE944:
 227              		.section	.text.HAL_FLASH_OperationErrorCallback,"ax",%progbits
 228              		.align	1
 229              		.weak	HAL_FLASH_OperationErrorCallback
 230              		.syntax unified
 231              		.thumb
 232              		.thumb_func
 233              		.fpu fpv4-sp-d16
 235              	HAL_FLASH_OperationErrorCallback:
 236              	.LVL13:
 237              	.LFB945:
 416:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* Prevent unused argument(s) compilation warning */
 238              		.loc 1 416 1 is_stmt 1 view -0
 239              		.cfi_startproc
 240              		@ args = 0, pretend = 0, frame = 0
 241              		@ frame_needed = 0, uses_anonymous_args = 0
 242              		@ link register save eliminated.
 418:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 243              		.loc 1 418 3 view .LVU53
 423:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 244              		.loc 1 423 1 is_stmt 0 view .LVU54
 245 0000 7047     		bx	lr
 246              		.cfi_endproc
 247              	.LFE945:
 249              		.section	.text.HAL_FLASH_IRQHandler,"ax",%progbits
 250              		.align	1
 251              		.global	HAL_FLASH_IRQHandler
 252              		.syntax unified
 253              		.thumb
 254              		.thumb_func
 255              		.fpu fpv4-sp-d16
 257              	HAL_FLASH_IRQHandler:
 258              	.LFB943:
 301:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   uint32_t param = 0xFFFFFFFFU;
 259              		.loc 1 301 1 is_stmt 1 view -0
 260              		.cfi_startproc
 261              		@ args = 0, pretend = 0, frame = 0
 262              		@ frame_needed = 0, uses_anonymous_args = 0
 263 0000 10B5     		push	{r4, lr}
 264              	.LCFI4:
 265              		.cfi_def_cfa_offset 8
 266              		.cfi_offset 4, -8
 267              		.cfi_offset 14, -4
 302:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   uint32_t error;
 268              		.loc 1 302 3 view .LVU56
 269              	.LVL14:
 303:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 270              		.loc 1 303 3 view .LVU57
 306:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 271              		.loc 1 306 3 view .LVU58
 306:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 272              		.loc 1 306 17 is_stmt 0 view .LVU59
 273 0002 2B4A     		ldr	r2, .L27
 274 0004 1369     		ldr	r3, [r2, #16]
 306:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 275              		.loc 1 306 9 view .LVU60
 276 0006 23F47053 		bic	r3, r3, #15360
ARM GAS  /tmp/ccdAeFDz.s 			page 34


 277 000a 23F00503 		bic	r3, r3, #5
 278 000e 1B04     		lsls	r3, r3, #16
 279 0010 1B0C     		lsrs	r3, r3, #16
 280              	.LVL15:
 309:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 281              		.loc 1 309 3 is_stmt 1 view .LVU61
 282 0012 5169     		ldr	r1, [r2, #20]
 283 0014 2748     		ldr	r0, .L27+4
 284 0016 8068     		ldr	r0, [r0, #8]
 285 0018 21EA0001 		bic	r1, r1, r0
 286 001c 5161     		str	r1, [r2, #20]
 313:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 287              		.loc 1 313 3 view .LVU62
 313:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 288              		.loc 1 313 32 is_stmt 0 view .LVU63
 289 001e 264A     		ldr	r2, .L27+8
 290 0020 0240     		ands	r2, r2, r0
 313:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 291              		.loc 1 313 6 view .LVU64
 292 0022 02B3     		cbz	r2, .L14
 316:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 293              		.loc 1 316 5 is_stmt 1 view .LVU65
 316:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 294              		.loc 1 316 11 is_stmt 0 view .LVU66
 295 0024 234A     		ldr	r2, .L27+4
 296 0026 D468     		ldr	r4, [r2, #12]
 297              	.LVL16:
 298              	.L15:
 327:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 299              		.loc 1 327 3 is_stmt 1 view .LVU67
 330:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 300              		.loc 1 330 3 view .LVU68
 330:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 301              		.loc 1 330 6 is_stmt 0 view .LVU69
 302 0028 33BB     		cbnz	r3, .L24
 303              	.LVL17:
 304              	.L16:
 346:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 305              		.loc 1 346 3 is_stmt 1 view .LVU70
 346:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 306              		.loc 1 346 7 is_stmt 0 view .LVU71
 307 002a 214B     		ldr	r3, .L27
 308 002c 1B69     		ldr	r3, [r3, #16]
 346:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 309              		.loc 1 346 6 view .LVU72
 310 002e 13F0010F 		tst	r3, #1
 311 0032 0CD0     		beq	.L17
 349:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 312              		.loc 1 349 5 is_stmt 1 discriminator 4 view .LVU73
 349:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 313              		.loc 1 349 5 discriminator 4 view .LVU74
 349:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 314              		.loc 1 349 5 discriminator 4 view .LVU75
 349:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 315              		.loc 1 349 5 discriminator 4 view .LVU76
 316 0034 1E4B     		ldr	r3, .L27
 317 0036 0122     		movs	r2, #1
ARM GAS  /tmp/ccdAeFDz.s 			page 35


 318 0038 1A61     		str	r2, [r3, #16]
 349:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 319              		.loc 1 349 5 discriminator 4 view .LVU77
 351:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     {
 320              		.loc 1 351 5 discriminator 4 view .LVU78
 351:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     {
 321              		.loc 1 351 15 is_stmt 0 discriminator 4 view .LVU79
 322 003a 1E4B     		ldr	r3, .L27+4
 323 003c 9B68     		ldr	r3, [r3, #8]
 351:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     {
 324              		.loc 1 351 8 discriminator 4 view .LVU80
 325 003e 022B     		cmp	r3, #2
 326 0040 26D0     		beq	.L25
 372:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     }
 327              		.loc 1 372 7 is_stmt 1 view .LVU81
 372:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     }
 328              		.loc 1 372 31 is_stmt 0 view .LVU82
 329 0042 1C4B     		ldr	r3, .L27+4
 330 0044 0022     		movs	r2, #0
 331 0046 9A60     		str	r2, [r3, #8]
 332              	.L20:
 376:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 333              		.loc 1 376 5 is_stmt 1 view .LVU83
 334 0048 2046     		mov	r0, r4
 335 004a FFF7FEFF 		bl	HAL_FLASH_EndOfOperationCallback
 336              	.LVL18:
 337              	.L17:
 379:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 338              		.loc 1 379 3 view .LVU84
 379:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 339              		.loc 1 379 13 is_stmt 0 view .LVU85
 340 004e 194B     		ldr	r3, .L27+4
 341 0050 9B68     		ldr	r3, [r3, #8]
 379:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 342              		.loc 1 379 6 view .LVU86
 343 0052 3BB9     		cbnz	r3, .L13
 382:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 344              		.loc 1 382 5 is_stmt 1 discriminator 4 view .LVU87
 382:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 345              		.loc 1 382 5 discriminator 4 view .LVU88
 382:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 346              		.loc 1 382 5 discriminator 4 view .LVU89
 382:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 347              		.loc 1 382 5 discriminator 4 view .LVU90
 348 0054 164A     		ldr	r2, .L27
 349 0056 5369     		ldr	r3, [r2, #20]
 350 0058 23F04073 		bic	r3, r3, #50331648
 351 005c 5361     		str	r3, [r2, #20]
 382:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 352              		.loc 1 382 5 discriminator 4 view .LVU91
 385:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 353              		.loc 1 385 5 discriminator 4 view .LVU92
 385:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 354              		.loc 1 385 5 discriminator 4 view .LVU93
 355 005e 154B     		ldr	r3, .L27+4
 356 0060 0022     		movs	r2, #0
 357 0062 1A70     		strb	r2, [r3]
ARM GAS  /tmp/ccdAeFDz.s 			page 36


 385:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 358              		.loc 1 385 5 discriminator 4 view .LVU94
 359              	.L13:
 387:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 360              		.loc 1 387 1 is_stmt 0 view .LVU95
 361 0064 10BD     		pop	{r4, pc}
 362              	.LVL19:
 363              	.L14:
 318:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 364              		.loc 1 318 8 is_stmt 1 view .LVU96
 318:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 365              		.loc 1 318 11 is_stmt 0 view .LVU97
 366 0066 10F0060F 		tst	r0, #6
 367 006a 02D0     		beq	.L22
 321:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 368              		.loc 1 321 5 is_stmt 1 view .LVU98
 321:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 369              		.loc 1 321 11 is_stmt 0 view .LVU99
 370 006c 114A     		ldr	r2, .L27+4
 371 006e 1469     		ldr	r4, [r2, #16]
 372              	.LVL20:
 321:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 373              		.loc 1 321 11 view .LVU100
 374 0070 DAE7     		b	.L15
 375              	.LVL21:
 376              	.L22:
 302:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   uint32_t error;
 377              		.loc 1 302 12 view .LVU101
 378 0072 4FF0FF34 		mov	r4, #-1
 379 0076 D7E7     		b	.L15
 380              	.LVL22:
 381              	.L24:
 333:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 382              		.loc 1 333 5 is_stmt 1 view .LVU102
 333:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 383              		.loc 1 333 22 is_stmt 0 view .LVU103
 384 0078 0E4A     		ldr	r2, .L27+4
 385 007a 5168     		ldr	r1, [r2, #4]
 386 007c 1943     		orrs	r1, r1, r3
 387 007e 5160     		str	r1, [r2, #4]
 336:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 388              		.loc 1 336 5 is_stmt 1 view .LVU104
 336:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 389              		.loc 1 336 5 view .LVU105
 336:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 390              		.loc 1 336 5 view .LVU106
 336:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 391              		.loc 1 336 5 view .LVU107
 392 0080 0B49     		ldr	r1, .L27
 393 0082 0B61     		str	r3, [r1, #16]
 336:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 394              		.loc 1 336 5 view .LVU108
 339:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 395              		.loc 1 339 5 view .LVU109
 339:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 396              		.loc 1 339 29 is_stmt 0 view .LVU110
 397 0084 0023     		movs	r3, #0
ARM GAS  /tmp/ccdAeFDz.s 			page 37


 398              	.LVL23:
 339:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 399              		.loc 1 339 29 view .LVU111
 400 0086 9360     		str	r3, [r2, #8]
 342:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 401              		.loc 1 342 5 is_stmt 1 view .LVU112
 402 0088 2046     		mov	r0, r4
 403 008a FFF7FEFF 		bl	HAL_FLASH_OperationErrorCallback
 404              	.LVL24:
 342:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 405              		.loc 1 342 5 is_stmt 0 view .LVU113
 406 008e CCE7     		b	.L16
 407              	.L25:
 354:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 408              		.loc 1 354 7 is_stmt 1 view .LVU114
 354:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 409              		.loc 1 354 13 is_stmt 0 view .LVU115
 410 0090 084A     		ldr	r2, .L27+4
 411 0092 5369     		ldr	r3, [r2, #20]
 354:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 412              		.loc 1 354 28 view .LVU116
 413 0094 013B     		subs	r3, r3, #1
 414 0096 5361     		str	r3, [r2, #20]
 357:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       {
 415              		.loc 1 357 7 is_stmt 1 view .LVU117
 357:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       {
 416              		.loc 1 357 10 is_stmt 0 view .LVU118
 417 0098 1BB9     		cbnz	r3, .L26
 366:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       }
 418              		.loc 1 366 9 is_stmt 1 view .LVU119
 366:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       }
 419              		.loc 1 366 33 is_stmt 0 view .LVU120
 420 009a 064B     		ldr	r3, .L27+4
 421 009c 0022     		movs	r2, #0
 422 009e 9A60     		str	r2, [r3, #8]
 423 00a0 D2E7     		b	.L20
 424              	.L26:
 360:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****         FLASH_PageErase(pFlash.Page);
 425              		.loc 1 360 9 is_stmt 1 view .LVU121
 360:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****         FLASH_PageErase(pFlash.Page);
 426              		.loc 1 360 15 is_stmt 0 view .LVU122
 427 00a2 1069     		ldr	r0, [r2, #16]
 360:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****         FLASH_PageErase(pFlash.Page);
 428              		.loc 1 360 20 view .LVU123
 429 00a4 0130     		adds	r0, r0, #1
 430 00a6 1061     		str	r0, [r2, #16]
 361:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       }
 431              		.loc 1 361 9 is_stmt 1 view .LVU124
 432 00a8 FFF7FEFF 		bl	FLASH_PageErase
 433              	.LVL25:
 434 00ac CCE7     		b	.L20
 435              	.L28:
 436 00ae 00BF     		.align	2
 437              	.L27:
 438 00b0 00400058 		.word	1476411392
 439 00b4 00000000 		.word	.LANCHOR0
 440 00b8 01000400 		.word	262145
ARM GAS  /tmp/ccdAeFDz.s 			page 38


 441              		.cfi_endproc
 442              	.LFE943:
 444              		.section	.text.HAL_FLASH_Unlock,"ax",%progbits
 445              		.align	1
 446              		.global	HAL_FLASH_Unlock
 447              		.syntax unified
 448              		.thumb
 449              		.thumb_func
 450              		.fpu fpv4-sp-d16
 452              	HAL_FLASH_Unlock:
 453              	.LFB946:
 449:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   HAL_StatusTypeDef status = HAL_OK;
 454              		.loc 1 449 1 view -0
 455              		.cfi_startproc
 456              		@ args = 0, pretend = 0, frame = 0
 457              		@ frame_needed = 0, uses_anonymous_args = 0
 458              		@ link register save eliminated.
 450:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 459              		.loc 1 450 3 view .LVU126
 460              	.LVL26:
 452:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 461              		.loc 1 452 3 view .LVU127
 452:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 462              		.loc 1 452 7 is_stmt 0 view .LVU128
 463 0000 094B     		ldr	r3, .L34
 464 0002 5B69     		ldr	r3, [r3, #20]
 452:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 465              		.loc 1 452 6 view .LVU129
 466 0004 002B     		cmp	r3, #0
 467 0006 01DB     		blt	.L33
 450:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 468              		.loc 1 450 21 view .LVU130
 469 0008 0020     		movs	r0, #0
 470 000a 7047     		bx	lr
 471              	.L33:
 455:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 472              		.loc 1 455 5 is_stmt 1 view .LVU131
 473 000c 064B     		ldr	r3, .L34
 474 000e 074A     		ldr	r2, .L34+4
 475 0010 9A60     		str	r2, [r3, #8]
 456:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 476              		.loc 1 456 5 view .LVU132
 477 0012 02F18832 		add	r2, r2, #-2004318072
 478 0016 9A60     		str	r2, [r3, #8]
 459:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     {
 479              		.loc 1 459 5 view .LVU133
 459:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     {
 480              		.loc 1 459 9 is_stmt 0 view .LVU134
 481 0018 5B69     		ldr	r3, [r3, #20]
 459:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     {
 482              		.loc 1 459 8 view .LVU135
 483 001a 002B     		cmp	r3, #0
 484 001c 01DB     		blt	.L32
 450:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 485              		.loc 1 450 21 view .LVU136
 486 001e 0020     		movs	r0, #0
 487 0020 7047     		bx	lr
ARM GAS  /tmp/ccdAeFDz.s 			page 39


 488              	.L32:
 461:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     }
 489              		.loc 1 461 14 view .LVU137
 490 0022 0120     		movs	r0, #1
 491              	.LVL27:
 465:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** }
 492              		.loc 1 465 3 is_stmt 1 view .LVU138
 466:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 493              		.loc 1 466 1 is_stmt 0 view .LVU139
 494 0024 7047     		bx	lr
 495              	.L35:
 496 0026 00BF     		.align	2
 497              	.L34:
 498 0028 00400058 		.word	1476411392
 499 002c 23016745 		.word	1164378403
 500              		.cfi_endproc
 501              	.LFE946:
 503              		.section	.text.HAL_FLASH_Lock,"ax",%progbits
 504              		.align	1
 505              		.global	HAL_FLASH_Lock
 506              		.syntax unified
 507              		.thumb
 508              		.thumb_func
 509              		.fpu fpv4-sp-d16
 511              	HAL_FLASH_Lock:
 512              	.LFB947:
 473:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   HAL_StatusTypeDef status = HAL_OK;
 513              		.loc 1 473 1 is_stmt 1 view -0
 514              		.cfi_startproc
 515              		@ args = 0, pretend = 0, frame = 0
 516              		@ frame_needed = 0, uses_anonymous_args = 0
 517              		@ link register save eliminated.
 474:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 518              		.loc 1 474 3 view .LVU141
 519              	.LVL28:
 478:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 520              		.loc 1 478 3 view .LVU142
 521 0000 054B     		ldr	r3, .L40
 522 0002 5A69     		ldr	r2, [r3, #20]
 523 0004 42F00042 		orr	r2, r2, #-2147483648
 524 0008 5A61     		str	r2, [r3, #20]
 481:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 525              		.loc 1 481 3 view .LVU143
 481:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 526              		.loc 1 481 7 is_stmt 0 view .LVU144
 527 000a 5B69     		ldr	r3, [r3, #20]
 481:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 528              		.loc 1 481 6 view .LVU145
 529 000c 002B     		cmp	r3, #0
 530 000e 01DB     		blt	.L39
 483:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 531              		.loc 1 483 12 view .LVU146
 532 0010 0120     		movs	r0, #1
 533              	.LVL29:
 486:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** }
 534              		.loc 1 486 3 is_stmt 1 view .LVU147
 487:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
ARM GAS  /tmp/ccdAeFDz.s 			page 40


 535              		.loc 1 487 1 is_stmt 0 view .LVU148
 536 0012 7047     		bx	lr
 537              	.LVL30:
 538              	.L39:
 474:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 539              		.loc 1 474 21 view .LVU149
 540 0014 0020     		movs	r0, #0
 541 0016 7047     		bx	lr
 542              	.L41:
 543              		.align	2
 544              	.L40:
 545 0018 00400058 		.word	1476411392
 546              		.cfi_endproc
 547              	.LFE947:
 549              		.section	.text.HAL_FLASH_OB_Unlock,"ax",%progbits
 550              		.align	1
 551              		.global	HAL_FLASH_OB_Unlock
 552              		.syntax unified
 553              		.thumb
 554              		.thumb_func
 555              		.fpu fpv4-sp-d16
 557              	HAL_FLASH_OB_Unlock:
 558              	.LFB948:
 494:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 559              		.loc 1 494 1 is_stmt 1 view -0
 560              		.cfi_startproc
 561              		@ args = 0, pretend = 0, frame = 0
 562              		@ frame_needed = 0, uses_anonymous_args = 0
 563              		@ link register save eliminated.
 495:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 564              		.loc 1 495 3 view .LVU151
 565              	.LVL31:
 498:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 566              		.loc 1 498 3 view .LVU152
 498:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 567              		.loc 1 498 7 is_stmt 0 view .LVU153
 568 0000 0A4B     		ldr	r3, .L46
 569 0002 5B69     		ldr	r3, [r3, #20]
 498:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 570              		.loc 1 498 6 view .LVU154
 571 0004 13F0804F 		tst	r3, #1073741824
 572 0008 0BD0     		beq	.L44
 501:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 573              		.loc 1 501 5 is_stmt 1 view .LVU155
 574 000a 084B     		ldr	r3, .L46
 575 000c 084A     		ldr	r2, .L46+4
 576 000e DA60     		str	r2, [r3, #12]
 502:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 577              		.loc 1 502 5 view .LVU156
 578 0010 02F14432 		add	r2, r2, #1145324612
 579 0014 DA60     		str	r2, [r3, #12]
 505:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     {
 580              		.loc 1 505 5 view .LVU157
 505:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     {
 581              		.loc 1 505 9 is_stmt 0 view .LVU158
 582 0016 5B69     		ldr	r3, [r3, #20]
 505:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     {
ARM GAS  /tmp/ccdAeFDz.s 			page 41


 583              		.loc 1 505 8 view .LVU159
 584 0018 13F0804F 		tst	r3, #1073741824
 585 001c 03D0     		beq	.L45
 495:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 586              		.loc 1 495 21 view .LVU160
 587 001e 0120     		movs	r0, #1
 588 0020 7047     		bx	lr
 589              	.L44:
 590 0022 0120     		movs	r0, #1
 591 0024 7047     		bx	lr
 592              	.L45:
 507:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     }
 593              		.loc 1 507 14 view .LVU161
 594 0026 0020     		movs	r0, #0
 595              	.LVL32:
 511:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** }
 596              		.loc 1 511 3 is_stmt 1 view .LVU162
 512:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 597              		.loc 1 512 1 is_stmt 0 view .LVU163
 598 0028 7047     		bx	lr
 599              	.L47:
 600 002a 00BF     		.align	2
 601              	.L46:
 602 002c 00400058 		.word	1476411392
 603 0030 3B2A1908 		.word	135866939
 604              		.cfi_endproc
 605              	.LFE948:
 607              		.section	.text.HAL_FLASH_OB_Lock,"ax",%progbits
 608              		.align	1
 609              		.global	HAL_FLASH_OB_Lock
 610              		.syntax unified
 611              		.thumb
 612              		.thumb_func
 613              		.fpu fpv4-sp-d16
 615              	HAL_FLASH_OB_Lock:
 616              	.LFB949:
 519:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   HAL_StatusTypeDef status = HAL_OK;
 617              		.loc 1 519 1 is_stmt 1 view -0
 618              		.cfi_startproc
 619              		@ args = 0, pretend = 0, frame = 0
 620              		@ frame_needed = 0, uses_anonymous_args = 0
 621              		@ link register save eliminated.
 520:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 622              		.loc 1 520 3 view .LVU165
 623              	.LVL33:
 524:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 624              		.loc 1 524 3 view .LVU166
 625 0000 064B     		ldr	r3, .L51
 626 0002 5A69     		ldr	r2, [r3, #20]
 627 0004 42F08042 		orr	r2, r2, #1073741824
 628 0008 5A61     		str	r2, [r3, #20]
 527:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 629              		.loc 1 527 3 view .LVU167
 527:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 630              		.loc 1 527 7 is_stmt 0 view .LVU168
 631 000a 5B69     		ldr	r3, [r3, #20]
 527:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
ARM GAS  /tmp/ccdAeFDz.s 			page 42


 632              		.loc 1 527 6 view .LVU169
 633 000c 13F0804F 		tst	r3, #1073741824
 634 0010 01D0     		beq	.L50
 520:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 635              		.loc 1 520 21 view .LVU170
 636 0012 0020     		movs	r0, #0
 637 0014 7047     		bx	lr
 638              	.L50:
 529:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 639              		.loc 1 529 12 view .LVU171
 640 0016 0120     		movs	r0, #1
 641              	.LVL34:
 532:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** }
 642              		.loc 1 532 3 is_stmt 1 view .LVU172
 533:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 643              		.loc 1 533 1 is_stmt 0 view .LVU173
 644 0018 7047     		bx	lr
 645              	.L52:
 646 001a 00BF     		.align	2
 647              	.L51:
 648 001c 00400058 		.word	1476411392
 649              		.cfi_endproc
 650              	.LFE949:
 652              		.section	.text.HAL_FLASH_OB_Launch,"ax",%progbits
 653              		.align	1
 654              		.global	HAL_FLASH_OB_Launch
 655              		.syntax unified
 656              		.thumb
 657              		.thumb_func
 658              		.fpu fpv4-sp-d16
 660              	HAL_FLASH_OB_Launch:
 661              	.LFB950:
 540:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* Set the bit to force the option byte reloading */
 662              		.loc 1 540 1 is_stmt 1 view -0
 663              		.cfi_startproc
 664              		@ args = 0, pretend = 0, frame = 0
 665              		@ frame_needed = 0, uses_anonymous_args = 0
 666              		@ link register save eliminated.
 543:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 667              		.loc 1 543 3 view .LVU175
 668 0000 034A     		ldr	r2, .L54
 669 0002 5369     		ldr	r3, [r2, #20]
 670 0004 43F00063 		orr	r3, r3, #134217728
 671 0008 5361     		str	r3, [r2, #20]
 547:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** }
 672              		.loc 1 547 3 view .LVU176
 548:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 673              		.loc 1 548 1 is_stmt 0 view .LVU177
 674 000a 0120     		movs	r0, #1
 675 000c 7047     		bx	lr
 676              	.L55:
 677 000e 00BF     		.align	2
 678              	.L54:
 679 0010 00400058 		.word	1476411392
 680              		.cfi_endproc
 681              	.LFE950:
 683              		.section	.text.HAL_FLASH_GetError,"ax",%progbits
ARM GAS  /tmp/ccdAeFDz.s 			page 43


 684              		.align	1
 685              		.global	HAL_FLASH_GetError
 686              		.syntax unified
 687              		.thumb
 688              		.thumb_func
 689              		.fpu fpv4-sp-d16
 691              	HAL_FLASH_GetError:
 692              	.LFB951:
 584:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   return pFlash.ErrorCode;
 693              		.loc 1 584 1 is_stmt 1 view -0
 694              		.cfi_startproc
 695              		@ args = 0, pretend = 0, frame = 0
 696              		@ frame_needed = 0, uses_anonymous_args = 0
 697              		@ link register save eliminated.
 585:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** }
 698              		.loc 1 585 3 view .LVU179
 586:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 699              		.loc 1 586 1 is_stmt 0 view .LVU180
 700 0000 014B     		ldr	r3, .L57
 701 0002 5868     		ldr	r0, [r3, #4]
 702 0004 7047     		bx	lr
 703              	.L58:
 704 0006 00BF     		.align	2
 705              	.L57:
 706 0008 00000000 		.word	.LANCHOR0
 707              		.cfi_endproc
 708              	.LFE951:
 710              		.section	.text.FLASH_WaitForLastOperation,"ax",%progbits
 711              		.align	1
 712              		.global	FLASH_WaitForLastOperation
 713              		.syntax unified
 714              		.thumb
 715              		.thumb_func
 716              		.fpu fpv4-sp-d16
 718              	FLASH_WaitForLastOperation:
 719              	.LVL35:
 720              	.LFB952:
 608:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   uint32_t error;
 721              		.loc 1 608 1 is_stmt 1 view -0
 722              		.cfi_startproc
 723              		@ args = 0, pretend = 0, frame = 0
 724              		@ frame_needed = 0, uses_anonymous_args = 0
 608:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   uint32_t error;
 725              		.loc 1 608 1 is_stmt 0 view .LVU182
 726 0000 38B5     		push	{r3, r4, r5, lr}
 727              	.LCFI5:
 728              		.cfi_def_cfa_offset 16
 729              		.cfi_offset 3, -16
 730              		.cfi_offset 4, -12
 731              		.cfi_offset 5, -8
 732              		.cfi_offset 14, -4
 733 0002 0546     		mov	r5, r0
 609:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   uint32_t tickstart = HAL_GetTick();
 734              		.loc 1 609 3 is_stmt 1 view .LVU183
 610:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 735              		.loc 1 610 3 view .LVU184
 610:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
ARM GAS  /tmp/ccdAeFDz.s 			page 44


 736              		.loc 1 610 24 is_stmt 0 view .LVU185
 737 0004 FFF7FEFF 		bl	HAL_GetTick
 738              	.LVL36:
 610:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 739              		.loc 1 610 24 view .LVU186
 740 0008 0446     		mov	r4, r0
 741              	.LVL37:
 615:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 742              		.loc 1 615 3 is_stmt 1 view .LVU187
 743              	.L60:
 615:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 744              		.loc 1 615 9 view .LVU188
 615:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 745              		.loc 1 615 10 is_stmt 0 view .LVU189
 746 000a 164B     		ldr	r3, .L73
 747 000c 1B69     		ldr	r3, [r3, #16]
 615:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 748              		.loc 1 615 9 view .LVU190
 749 000e 13F4803F 		tst	r3, #65536
 750 0012 06D0     		beq	.L70
 617:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     {
 751              		.loc 1 617 5 is_stmt 1 view .LVU191
 617:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     {
 752              		.loc 1 617 10 is_stmt 0 view .LVU192
 753 0014 FFF7FEFF 		bl	HAL_GetTick
 754              	.LVL38:
 617:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     {
 755              		.loc 1 617 24 view .LVU193
 756 0018 001B     		subs	r0, r0, r4
 617:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     {
 757              		.loc 1 617 8 view .LVU194
 758 001a A842     		cmp	r0, r5
 759 001c F5D3     		bcc	.L60
 619:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     }
 760              		.loc 1 619 14 view .LVU195
 761 001e 0320     		movs	r0, #3
 762              	.L61:
 657:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 763              		.loc 1 657 1 view .LVU196
 764 0020 38BD     		pop	{r3, r4, r5, pc}
 765              	.LVL39:
 766              	.L70:
 624:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 767              		.loc 1 624 3 is_stmt 1 view .LVU197
 624:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 768              		.loc 1 624 9 is_stmt 0 view .LVU198
 769 0022 104B     		ldr	r3, .L73
 770 0024 1B69     		ldr	r3, [r3, #16]
 771              	.LVL40:
 627:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 772              		.loc 1 627 3 is_stmt 1 view .LVU199
 627:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 773              		.loc 1 627 6 is_stmt 0 view .LVU200
 774 0026 13F0010F 		tst	r3, #1
 775 002a 02D0     		beq	.L63
 630:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 776              		.loc 1 630 5 is_stmt 1 discriminator 4 view .LVU201
ARM GAS  /tmp/ccdAeFDz.s 			page 45


 630:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 777              		.loc 1 630 5 discriminator 4 view .LVU202
 630:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 778              		.loc 1 630 5 discriminator 4 view .LVU203
 630:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 779              		.loc 1 630 5 discriminator 4 view .LVU204
 780 002c 0D4A     		ldr	r2, .L73
 781 002e 0121     		movs	r1, #1
 782 0030 1161     		str	r1, [r2, #16]
 783              	.L63:
 630:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 784              		.loc 1 630 5 discriminator 6 view .LVU205
 634:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 785              		.loc 1 634 3 discriminator 6 view .LVU206
 634:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 786              		.loc 1 634 9 is_stmt 0 discriminator 6 view .LVU207
 787 0032 4CF2FA32 		movw	r2, #50170
 788              	.LVL41:
 637:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 789              		.loc 1 637 3 is_stmt 1 discriminator 6 view .LVU208
 637:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 790              		.loc 1 637 3 discriminator 6 view .LVU209
 637:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 791              		.loc 1 637 3 discriminator 6 view .LVU210
 792 0036 1340     		ands	r3, r3, r2
 793              	.LVL42:
 637:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 794              		.loc 1 637 3 is_stmt 0 discriminator 6 view .LVU211
 795 0038 01D0     		beq	.L64
 637:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 796              		.loc 1 637 3 is_stmt 1 discriminator 4 view .LVU212
 797 003a 0A4A     		ldr	r2, .L73
 798 003c 1361     		str	r3, [r2, #16]
 799              	.L64:
 637:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 800              		.loc 1 637 3 discriminator 6 view .LVU213
 639:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 801              		.loc 1 639 3 discriminator 6 view .LVU214
 639:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 802              		.loc 1 639 6 is_stmt 0 discriminator 6 view .LVU215
 803 003e 5BB9     		cbnz	r3, .L71
 804              	.LVL43:
 805              	.L65:
 648:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 806              		.loc 1 648 9 is_stmt 1 view .LVU216
 648:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 807              		.loc 1 648 10 is_stmt 0 view .LVU217
 808 0040 084B     		ldr	r3, .L73
 809 0042 1B69     		ldr	r3, [r3, #16]
 648:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 810              		.loc 1 648 9 view .LVU218
 811 0044 13F4802F 		tst	r3, #262144
 812 0048 0AD0     		beq	.L72
 650:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     {
 813              		.loc 1 650 5 is_stmt 1 view .LVU219
 650:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     {
 814              		.loc 1 650 10 is_stmt 0 view .LVU220
ARM GAS  /tmp/ccdAeFDz.s 			page 46


 815 004a FFF7FEFF 		bl	HAL_GetTick
 816              	.LVL44:
 650:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     {
 817              		.loc 1 650 24 view .LVU221
 818 004e 001B     		subs	r0, r0, r4
 650:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     {
 819              		.loc 1 650 8 view .LVU222
 820 0050 A842     		cmp	r0, r5
 821 0052 F5D3     		bcc	.L65
 652:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     }
 822              		.loc 1 652 14 view .LVU223
 823 0054 0320     		movs	r0, #3
 824 0056 E3E7     		b	.L61
 825              	.LVL45:
 826              	.L71:
 642:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 827              		.loc 1 642 5 is_stmt 1 view .LVU224
 642:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 828              		.loc 1 642 22 is_stmt 0 view .LVU225
 829 0058 034A     		ldr	r2, .L73+4
 830 005a 5360     		str	r3, [r2, #4]
 644:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 831              		.loc 1 644 5 is_stmt 1 view .LVU226
 644:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 832              		.loc 1 644 12 is_stmt 0 view .LVU227
 833 005c 0120     		movs	r0, #1
 834 005e DFE7     		b	.L61
 835              	.LVL46:
 836              	.L72:
 656:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** }
 837              		.loc 1 656 10 view .LVU228
 838 0060 0020     		movs	r0, #0
 839 0062 DDE7     		b	.L61
 840              	.L74:
 841              		.align	2
 842              	.L73:
 843 0064 00400058 		.word	1476411392
 844 0068 00000000 		.word	.LANCHOR0
 845              		.cfi_endproc
 846              	.LFE952:
 848              		.section	.text.HAL_FLASH_Program,"ax",%progbits
 849              		.align	1
 850              		.global	HAL_FLASH_Program
 851              		.syntax unified
 852              		.thumb
 853              		.thumb_func
 854              		.fpu fpv4-sp-d16
 856              	HAL_FLASH_Program:
 857              	.LVL47:
 858              	.LFB941:
 179:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   HAL_StatusTypeDef status;
 859              		.loc 1 179 1 is_stmt 1 view -0
 860              		.cfi_startproc
 861              		@ args = 0, pretend = 0, frame = 0
 862              		@ frame_needed = 0, uses_anonymous_args = 0
 179:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   HAL_StatusTypeDef status;
 863              		.loc 1 179 1 is_stmt 0 view .LVU230
ARM GAS  /tmp/ccdAeFDz.s 			page 47


 864 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 865              	.LCFI6:
 866              		.cfi_def_cfa_offset 24
 867              		.cfi_offset 3, -24
 868              		.cfi_offset 4, -20
 869              		.cfi_offset 5, -16
 870              		.cfi_offset 6, -12
 871              		.cfi_offset 7, -8
 872              		.cfi_offset 14, -4
 873 0002 1F46     		mov	r7, r3
 180:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 874              		.loc 1 180 3 is_stmt 1 view .LVU231
 183:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   assert_param(IS_ADDR_ALIGNED_64BITS(Address));
 875              		.loc 1 183 3 view .LVU232
 184:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
 876              		.loc 1 184 3 view .LVU233
 185:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 877              		.loc 1 185 3 view .LVU234
 188:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 878              		.loc 1 188 3 view .LVU235
 188:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 879              		.loc 1 188 3 view .LVU236
 880 0004 154B     		ldr	r3, .L83
 881 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 882 0008 012B     		cmp	r3, #1
 883 000a 25D0     		beq	.L80
 884 000c 0446     		mov	r4, r0
 885 000e 0D46     		mov	r5, r1
 886 0010 1646     		mov	r6, r2
 188:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 887              		.loc 1 188 3 discriminator 2 view .LVU237
 888 0012 124B     		ldr	r3, .L83
 889 0014 0122     		movs	r2, #1
 890              	.LVL48:
 188:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 891              		.loc 1 188 3 is_stmt 0 discriminator 2 view .LVU238
 892 0016 1A70     		strb	r2, [r3]
 188:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 893              		.loc 1 188 3 is_stmt 1 discriminator 2 view .LVU239
 191:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 894              		.loc 1 191 3 discriminator 2 view .LVU240
 191:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 895              		.loc 1 191 20 is_stmt 0 discriminator 2 view .LVU241
 896 0018 0022     		movs	r2, #0
 897 001a 5A60     		str	r2, [r3, #4]
 194:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 898              		.loc 1 194 3 is_stmt 1 discriminator 2 view .LVU242
 194:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 899              		.loc 1 194 12 is_stmt 0 discriminator 2 view .LVU243
 900 001c 4FF47A70 		mov	r0, #1000
 901              	.LVL49:
 194:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 902              		.loc 1 194 12 discriminator 2 view .LVU244
 903 0020 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 904              	.LVL50:
 196:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 905              		.loc 1 196 3 is_stmt 1 discriminator 2 view .LVU245
ARM GAS  /tmp/ccdAeFDz.s 			page 48


 196:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 906              		.loc 1 196 6 is_stmt 0 discriminator 2 view .LVU246
 907 0024 70B9     		cbnz	r0, .L77
 198:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     {
 908              		.loc 1 198 5 is_stmt 1 view .LVU247
 198:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     {
 909              		.loc 1 198 8 is_stmt 0 view .LVU248
 910 0026 012C     		cmp	r4, #1
 911 0028 10D0     		beq	.L82
 209:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 912              		.loc 1 209 7 is_stmt 1 view .LVU249
 212:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     }
 913              		.loc 1 212 7 view .LVU250
 914 002a 3146     		mov	r1, r6
 915 002c 2846     		mov	r0, r5
 916              	.LVL51:
 212:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     }
 917              		.loc 1 212 7 is_stmt 0 view .LVU251
 918 002e FFF7FEFF 		bl	FLASH_Program_Fast
 919              	.LVL52:
 920              	.L79:
 216:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 921              		.loc 1 216 5 is_stmt 1 view .LVU252
 216:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 922              		.loc 1 216 14 is_stmt 0 view .LVU253
 923 0032 4FF47A70 		mov	r0, #1000
 924 0036 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 925              	.LVL53:
 219:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 926              		.loc 1 219 5 is_stmt 1 view .LVU254
 927 003a 094A     		ldr	r2, .L83+4
 928 003c 5369     		ldr	r3, [r2, #20]
 929 003e 23EA0404 		bic	r4, r3, r4
 930              	.LVL54:
 219:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 931              		.loc 1 219 5 is_stmt 0 view .LVU255
 932 0042 5461     		str	r4, [r2, #20]
 933              	.L77:
 223:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 934              		.loc 1 223 3 is_stmt 1 view .LVU256
 223:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 935              		.loc 1 223 3 view .LVU257
 936 0044 054B     		ldr	r3, .L83
 937 0046 0022     		movs	r2, #0
 938 0048 1A70     		strb	r2, [r3]
 223:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 939              		.loc 1 223 3 view .LVU258
 226:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** }
 940              		.loc 1 226 3 view .LVU259
 941              	.LVL55:
 942              	.L76:
 227:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 943              		.loc 1 227 1 is_stmt 0 view .LVU260
 944 004a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 945              	.LVL56:
 946              	.L82:
 201:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
ARM GAS  /tmp/ccdAeFDz.s 			page 49


 947              		.loc 1 201 7 is_stmt 1 view .LVU261
 204:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     }
 948              		.loc 1 204 7 view .LVU262
 949 004c 3246     		mov	r2, r6
 950 004e 3B46     		mov	r3, r7
 951 0050 2846     		mov	r0, r5
 952              	.LVL57:
 204:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     }
 953              		.loc 1 204 7 is_stmt 0 view .LVU263
 954 0052 FFF7FEFF 		bl	FLASH_Program_DoubleWord
 955              	.LVL58:
 956 0056 ECE7     		b	.L79
 957              	.LVL59:
 958              	.L80:
 188:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 959              		.loc 1 188 3 view .LVU264
 960 0058 0220     		movs	r0, #2
 961              	.LVL60:
 188:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 962              		.loc 1 188 3 view .LVU265
 963 005a F6E7     		b	.L76
 964              	.L84:
 965              		.align	2
 966              	.L83:
 967 005c 00000000 		.word	.LANCHOR0
 968 0060 00400058 		.word	1476411392
 969              		.cfi_endproc
 970              	.LFE941:
 972              		.section	.text.HAL_FLASH_Program_IT,"ax",%progbits
 973              		.align	1
 974              		.global	HAL_FLASH_Program_IT
 975              		.syntax unified
 976              		.thumb
 977              		.thumb_func
 978              		.fpu fpv4-sp-d16
 980              	HAL_FLASH_Program_IT:
 981              	.LVL61:
 982              	.LFB942:
 243:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   HAL_StatusTypeDef status;
 983              		.loc 1 243 1 is_stmt 1 view -0
 984              		.cfi_startproc
 985              		@ args = 0, pretend = 0, frame = 0
 986              		@ frame_needed = 0, uses_anonymous_args = 0
 243:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   HAL_StatusTypeDef status;
 987              		.loc 1 243 1 is_stmt 0 view .LVU267
 988 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 989              	.LCFI7:
 990              		.cfi_def_cfa_offset 24
 991              		.cfi_offset 4, -24
 992              		.cfi_offset 5, -20
 993              		.cfi_offset 6, -16
 994              		.cfi_offset 7, -12
 995              		.cfi_offset 8, -8
 996              		.cfi_offset 14, -4
 997 0004 1646     		mov	r6, r2
 244:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 998              		.loc 1 244 3 is_stmt 1 view .LVU268
ARM GAS  /tmp/ccdAeFDz.s 			page 50


 247:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   assert_param(IS_ADDR_ALIGNED_64BITS(Address));
 999              		.loc 1 247 3 view .LVU269
 248:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
 1000              		.loc 1 248 3 view .LVU270
 249:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 1001              		.loc 1 249 3 view .LVU271
 252:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 1002              		.loc 1 252 3 view .LVU272
 252:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 1003              		.loc 1 252 3 view .LVU273
 1004 0006 184A     		ldr	r2, .L92
 1005              	.LVL62:
 252:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 1006              		.loc 1 252 3 is_stmt 0 view .LVU274
 1007 0008 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1008 000a 012A     		cmp	r2, #1
 1009 000c 28D0     		beq	.L89
 1010 000e 0446     		mov	r4, r0
 1011 0010 0D46     		mov	r5, r1
 1012 0012 1F46     		mov	r7, r3
 252:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 1013              		.loc 1 252 3 is_stmt 1 discriminator 2 view .LVU275
 1014 0014 144A     		ldr	r2, .L92
 1015 0016 0123     		movs	r3, #1
 1016 0018 1370     		strb	r3, [r2]
 252:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 1017              		.loc 1 252 3 discriminator 2 view .LVU276
 255:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 1018              		.loc 1 255 3 discriminator 2 view .LVU277
 255:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 1019              		.loc 1 255 20 is_stmt 0 discriminator 2 view .LVU278
 1020 001a 0023     		movs	r3, #0
 1021 001c 5360     		str	r3, [r2, #4]
 258:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 1022              		.loc 1 258 3 is_stmt 1 discriminator 2 view .LVU279
 258:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 1023              		.loc 1 258 12 is_stmt 0 discriminator 2 view .LVU280
 1024 001e 4FF47A70 		mov	r0, #1000
 1025              	.LVL63:
 258:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 1026              		.loc 1 258 12 discriminator 2 view .LVU281
 1027 0022 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1028              	.LVL64:
 260:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 1029              		.loc 1 260 3 is_stmt 1 discriminator 2 view .LVU282
 260:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 1030              		.loc 1 260 6 is_stmt 0 discriminator 2 view .LVU283
 1031 0026 8046     		mov	r8, r0
 1032 0028 28B1     		cbz	r0, .L87
 263:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 1033              		.loc 1 263 5 is_stmt 1 view .LVU284
 263:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 1034              		.loc 1 263 5 view .LVU285
 1035 002a 0F4B     		ldr	r3, .L92
 1036 002c 0022     		movs	r2, #0
 1037 002e 1A70     		strb	r2, [r3]
 263:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
ARM GAS  /tmp/ccdAeFDz.s 			page 51


 1038              		.loc 1 263 5 view .LVU286
 1039              	.LVL65:
 1040              	.L86:
 294:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 1041              		.loc 1 294 1 is_stmt 0 view .LVU287
 1042 0030 4046     		mov	r0, r8
 1043 0032 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1044              	.LVL66:
 1045              	.L87:
 268:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     pFlash.Address = Address;
 1046              		.loc 1 268 5 is_stmt 1 view .LVU288
 268:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     pFlash.Address = Address;
 1047              		.loc 1 268 29 is_stmt 0 view .LVU289
 1048 0036 0C4B     		ldr	r3, .L92
 1049 0038 9C60     		str	r4, [r3, #8]
 269:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 1050              		.loc 1 269 5 is_stmt 1 view .LVU290
 269:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 1051              		.loc 1 269 20 is_stmt 0 view .LVU291
 1052 003a DD60     		str	r5, [r3, #12]
 272:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 1053              		.loc 1 272 5 is_stmt 1 view .LVU292
 272:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 1054              		.loc 1 272 5 view .LVU293
 272:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 1055              		.loc 1 272 5 view .LVU294
 272:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 1056              		.loc 1 272 5 view .LVU295
 1057 003c 0B4A     		ldr	r2, .L92+4
 1058 003e 5369     		ldr	r3, [r2, #20]
 1059 0040 43F04073 		orr	r3, r3, #50331648
 1060 0044 5361     		str	r3, [r2, #20]
 272:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 1061              		.loc 1 272 5 view .LVU296
 274:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     {
 1062              		.loc 1 274 5 view .LVU297
 274:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     {
 1063              		.loc 1 274 8 is_stmt 0 view .LVU298
 1064 0046 012C     		cmp	r4, #1
 1065 0048 04D0     		beq	.L91
 285:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 1066              		.loc 1 285 7 is_stmt 1 view .LVU299
 288:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     }
 1067              		.loc 1 288 7 view .LVU300
 1068 004a 3146     		mov	r1, r6
 1069 004c 2846     		mov	r0, r5
 1070              	.LVL67:
 288:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     }
 1071              		.loc 1 288 7 is_stmt 0 view .LVU301
 1072 004e FFF7FEFF 		bl	FLASH_Program_Fast
 1073              	.LVL68:
 1074 0052 EDE7     		b	.L86
 1075              	.LVL69:
 1076              	.L91:
 277:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 1077              		.loc 1 277 7 is_stmt 1 view .LVU302
 280:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     }
ARM GAS  /tmp/ccdAeFDz.s 			page 52


 1078              		.loc 1 280 7 view .LVU303
 1079 0054 3246     		mov	r2, r6
 1080 0056 3B46     		mov	r3, r7
 1081 0058 2846     		mov	r0, r5
 1082              	.LVL70:
 280:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     }
 1083              		.loc 1 280 7 is_stmt 0 view .LVU304
 1084 005a FFF7FEFF 		bl	FLASH_Program_DoubleWord
 1085              	.LVL71:
 1086 005e E7E7     		b	.L86
 1087              	.LVL72:
 1088              	.L89:
 252:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 1089              		.loc 1 252 3 view .LVU305
 1090 0060 4FF00208 		mov	r8, #2
 1091 0064 E4E7     		b	.L86
 1092              	.L93:
 1093 0066 00BF     		.align	2
 1094              	.L92:
 1095 0068 00000000 		.word	.LANCHOR0
 1096 006c 00400058 		.word	1476411392
 1097              		.cfi_endproc
 1098              	.LFE942:
 1100              		.global	pFlash
 1101              		.section	.bss.pFlash,"aw",%nobits
 1102              		.align	2
 1103              		.set	.LANCHOR0,. + 0
 1106              	pFlash:
 1107 0000 00000000 		.space	24
 1107      00000000 
 1107      00000000 
 1107      00000000 
 1107      00000000 
 1108              		.text
 1109              	.Letext0:
 1110              		.file 3 "/home/nyanko/gcc/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/machine/_default
 1111              		.file 4 "/home/nyanko/gcc/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/_stdint.h"
 1112              		.file 5 "Drivers/CMSIS/Include/core_cm4.h"
 1113              		.file 6 "Drivers/CMSIS/Device/ST/STM32WBxx/Include/system_stm32wbxx.h"
 1114              		.file 7 "Drivers/CMSIS/Device/ST/STM32WBxx/Include/stm32wb55xx.h"
 1115              		.file 8 "Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_hal_def.h"
 1116              		.file 9 "Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_hal_flash.h"
 1117              		.file 10 "Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_hal.h"
 1118              		.file 11 "Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_hal_flash_ex.h"
ARM GAS  /tmp/ccdAeFDz.s 			page 53


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32wbxx_hal_flash.c
     /tmp/ccdAeFDz.s:18     .text.FLASH_Program_DoubleWord:0000000000000000 $t
     /tmp/ccdAeFDz.s:25     .text.FLASH_Program_DoubleWord:0000000000000000 FLASH_Program_DoubleWord
     /tmp/ccdAeFDz.s:74     .text.FLASH_Program_DoubleWord:000000000000001c $d
     /tmp/ccdAeFDz.s:79     .RamFunc:0000000000000000 $t
     /tmp/ccdAeFDz.s:85     .RamFunc:0000000000000000 FLASH_Program_Fast
     /tmp/ccdAeFDz.s:201    .RamFunc:0000000000000038 $d
     /tmp/ccdAeFDz.s:206    .text.HAL_FLASH_EndOfOperationCallback:0000000000000000 $t
     /tmp/ccdAeFDz.s:213    .text.HAL_FLASH_EndOfOperationCallback:0000000000000000 HAL_FLASH_EndOfOperationCallback
     /tmp/ccdAeFDz.s:228    .text.HAL_FLASH_OperationErrorCallback:0000000000000000 $t
     /tmp/ccdAeFDz.s:235    .text.HAL_FLASH_OperationErrorCallback:0000000000000000 HAL_FLASH_OperationErrorCallback
     /tmp/ccdAeFDz.s:250    .text.HAL_FLASH_IRQHandler:0000000000000000 $t
     /tmp/ccdAeFDz.s:257    .text.HAL_FLASH_IRQHandler:0000000000000000 HAL_FLASH_IRQHandler
     /tmp/ccdAeFDz.s:438    .text.HAL_FLASH_IRQHandler:00000000000000b0 $d
     /tmp/ccdAeFDz.s:445    .text.HAL_FLASH_Unlock:0000000000000000 $t
     /tmp/ccdAeFDz.s:452    .text.HAL_FLASH_Unlock:0000000000000000 HAL_FLASH_Unlock
     /tmp/ccdAeFDz.s:498    .text.HAL_FLASH_Unlock:0000000000000028 $d
     /tmp/ccdAeFDz.s:504    .text.HAL_FLASH_Lock:0000000000000000 $t
     /tmp/ccdAeFDz.s:511    .text.HAL_FLASH_Lock:0000000000000000 HAL_FLASH_Lock
     /tmp/ccdAeFDz.s:545    .text.HAL_FLASH_Lock:0000000000000018 $d
     /tmp/ccdAeFDz.s:550    .text.HAL_FLASH_OB_Unlock:0000000000000000 $t
     /tmp/ccdAeFDz.s:557    .text.HAL_FLASH_OB_Unlock:0000000000000000 HAL_FLASH_OB_Unlock
     /tmp/ccdAeFDz.s:602    .text.HAL_FLASH_OB_Unlock:000000000000002c $d
     /tmp/ccdAeFDz.s:608    .text.HAL_FLASH_OB_Lock:0000000000000000 $t
     /tmp/ccdAeFDz.s:615    .text.HAL_FLASH_OB_Lock:0000000000000000 HAL_FLASH_OB_Lock
     /tmp/ccdAeFDz.s:648    .text.HAL_FLASH_OB_Lock:000000000000001c $d
     /tmp/ccdAeFDz.s:653    .text.HAL_FLASH_OB_Launch:0000000000000000 $t
     /tmp/ccdAeFDz.s:660    .text.HAL_FLASH_OB_Launch:0000000000000000 HAL_FLASH_OB_Launch
     /tmp/ccdAeFDz.s:679    .text.HAL_FLASH_OB_Launch:0000000000000010 $d
     /tmp/ccdAeFDz.s:684    .text.HAL_FLASH_GetError:0000000000000000 $t
     /tmp/ccdAeFDz.s:691    .text.HAL_FLASH_GetError:0000000000000000 HAL_FLASH_GetError
     /tmp/ccdAeFDz.s:706    .text.HAL_FLASH_GetError:0000000000000008 $d
     /tmp/ccdAeFDz.s:711    .text.FLASH_WaitForLastOperation:0000000000000000 $t
     /tmp/ccdAeFDz.s:718    .text.FLASH_WaitForLastOperation:0000000000000000 FLASH_WaitForLastOperation
     /tmp/ccdAeFDz.s:843    .text.FLASH_WaitForLastOperation:0000000000000064 $d
     /tmp/ccdAeFDz.s:849    .text.HAL_FLASH_Program:0000000000000000 $t
     /tmp/ccdAeFDz.s:856    .text.HAL_FLASH_Program:0000000000000000 HAL_FLASH_Program
     /tmp/ccdAeFDz.s:967    .text.HAL_FLASH_Program:000000000000005c $d
     /tmp/ccdAeFDz.s:973    .text.HAL_FLASH_Program_IT:0000000000000000 $t
     /tmp/ccdAeFDz.s:980    .text.HAL_FLASH_Program_IT:0000000000000000 HAL_FLASH_Program_IT
     /tmp/ccdAeFDz.s:1095   .text.HAL_FLASH_Program_IT:0000000000000068 $d
     /tmp/ccdAeFDz.s:1106   .bss.pFlash:0000000000000000 pFlash
     /tmp/ccdAeFDz.s:1102   .bss.pFlash:0000000000000000 $d

UNDEFINED SYMBOLS
FLASH_PageErase
HAL_GetTick
